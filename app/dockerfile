# Use an official Python runtime as a parent image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /code # Using /code as the workdir

# Prevent Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1
# Ensure Python output is sent straight to terminal (useful for Docker logs)
ENV PYTHONUNBUFFERED 1

# Install system dependencies
# Add any system dependencies needed here (e.g., build-essential, libpq-dev for psycopg2)
# RUN apt-get update && apt-get install -y --no-install-recommends gcc libpq-dev && rm -rf /var/lib/apt/lists/*

# Copy dependency file first to leverage Docker cache
# Since this Dockerfile is now inside app/, requirements.txt is in the same directory
COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir --upgrade pip
# Install dependencies and gunicorn
RUN pip install --no-cache-dir -r requirements.txt && pip install --no-cache-dir gunicorn

# Copy the application code into the container
# Copy everything from the build context (app/) into the container's WORKDIR (/code)
COPY . .

# Expose port (informational, Railway handles the actual port via $PORT)
# EXPOSE 8000

# Command to run the application using Gunicorn
# Gunicorn will bind to 0.0.0.0:$PORT. $PORT is injected by Railway.
# Adjust '-w 4' (workers) based on your Railway plan's resources.
# The entrypoint is now relative to the WORKDIR (/code)
CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-w", "4", "-b", "0.0.0.0:$PORT", "main:app"]
